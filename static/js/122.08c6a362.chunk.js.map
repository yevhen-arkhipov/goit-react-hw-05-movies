{"version":3,"file":"static/js/122.08c6a362.chunk.js","mappings":"+PAqCA,EAjCgB,WACd,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkB,mCAAG,8GAEJC,EAAAA,EAAAA,IAAWJ,GAFP,OAEjBK,EAFiB,OAGvBN,EAAWM,GAHY,gDAKvBC,QAAQC,MAAR,MALuB,yDAAH,qDAQxBJ,GACD,GAAE,CAACH,IAEJ,IAAMQ,EAAWV,EAAQW,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OAC3B,2BACE,wBACE,oCAAYD,QAEd,uBAAIC,MAJGF,EADkB,IAS7B,OAAOZ,EAAQe,OAAS,GACtB,8BAAML,EAAN,QAEA,mEAEH,C,8LCjCDM,EAAAA,GAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEVC,EAAU,UAKHC,EAAa,mCAAG,+GAEFH,EAAAA,GAAAA,IAAA,UANR,sBAMQ,oBAAsCC,IAFpC,uBAEjBV,EAFiB,EAEjBA,KAFiB,kBAGlBA,EAAKa,SAHa,gCAKzBZ,QAAQC,MAAR,MALyB,yDAAH,qDAkBbY,EAAY,mCAAG,WAAMT,GAAN,kGAEDI,EAAAA,GAAAA,IAAA,UAClBE,GADkB,OACLN,EADK,oBACSK,EADT,oBAFC,uBAEhBV,EAFgB,EAEhBA,KAFgB,kBAKjBA,GALiB,gCAOxBC,QAAQC,MAAR,MAPwB,yDAAH,sDAWZa,EAAgB,mCAAG,WAAMC,GAAN,kGAELP,EAAAA,GAAAA,IAAA,UAjCV,gBAiCU,oBACKC,EADL,kBACsBM,EADtB,yBAFK,uBAEpBhB,EAFoB,EAEpBA,KAFoB,kBAKrBA,EAAKa,SALgB,gCAO5BZ,QAAQC,MAAR,MAP4B,yDAAH,sDAWhBe,EAAO,mCAAG,WAAMZ,GAAN,kGAEII,EAAAA,GAAAA,IAAA,UAClBE,GADkB,OACLN,EADK,4BACiBK,EADjB,oBAFJ,uBAEXV,EAFW,EAEXA,KAFW,kBAKZA,EAAKkB,MALO,gCAOnBjB,QAAQC,MAAR,MAPmB,yDAAH,sDAWPH,EAAU,mCAAG,WAAMM,GAAN,kGAECI,EAAAA,GAAAA,IAAA,UAClBE,GADkB,OACLN,EADK,4BACiBK,EADjB,oBAFD,uBAEdV,EAFc,EAEdA,KAFc,kBAKfA,EAAKa,SALU,gCAOtBZ,QAAQC,MAAR,MAPsB,yDAAH,qD","sources":["components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { GetReviews } from 'services/api';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchReviewsMovies = async () => {\n      try {\n        const data = await GetReviews(movieId);\n        setReviews(data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchReviewsMovies();\n  }, [movieId]);\n\n  const elements = reviews.map(({ id, author, content }) => (\n    <li key={id}>\n      <p>\n        <b>Author: {author}</b>\n      </p>\n      <p>{content}</p>\n    </li>\n  ));\n\n  return reviews.length > 0 ? (\n    <ul> {elements} </ul>\n  ) : (\n    <p>We don't have any reviews for this movie</p>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'f770e26d26a9f8dc8d3f9af112edaff0';\n\nconst queryMovie = `/movie/`;\nconst queryTrending = `/trending/movie/day`;\nconst queryGenres = `/genre/movie/list`;\nconst querySearch = `/search/movie`;\n\nexport const TrendingMovie = async () => {\n  try {\n    const { data } = await axios.get(`${queryTrending}?api_key=${API_KEY}`);\n    return data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const GetGenre = async () => {\n  try {\n    const { genres } = await axios.get(`${queryGenres}?api_key=${API_KEY}`);\n    return genres;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const GetMovieById = async id => {\n  try {\n    const { data } = await axios.get(\n      `${queryMovie}${id}?api_key=${API_KEY}&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const GetMovieBySearch = async q => {\n  try {\n    const { data } = await axios.get(\n      `${querySearch}?api_key=${API_KEY}&query=${q}&include_adult=false`\n    );\n    return data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const GetCast = async id => {\n  try {\n    const { data } = await axios.get(\n      `${queryMovie}${id}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return data.cast;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const GetReviews = async id => {\n  try {\n    const { data } = await axios.get(\n      `${queryMovie}${id}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n    return data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n"],"names":["useState","reviews","setReviews","movieId","useParams","useEffect","fetchReviewsMovies","GetReviews","data","console","error","elements","map","id","author","content","length","axios","API_KEY","queryMovie","TrendingMovie","results","GetMovieById","GetMovieBySearch","q","GetCast","cast"],"sourceRoot":""}