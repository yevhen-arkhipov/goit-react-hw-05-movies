{"version":3,"file":"static/js/588.fdaed3b4.chunk.js","mappings":"iRAYMA,EAAQ,CACZ,CAAEC,KAAM,OAAQC,KAAM,QACtB,CAAED,KAAM,UAAWC,KAAM,YAmF3B,EAhFqB,WAAO,IAAD,EACzB,GAA0BC,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOC,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MAGXC,GAAO,WAFIC,EAAAA,EAAAA,MAEKC,aAAT,eAAgBF,OAAQ,IAC7BG,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,8GAEEC,EAAAA,EAAAA,IAAaJ,GAFf,OAEbK,EAFa,OAGnBX,EAASW,GAHU,gDAKnBC,QAAQC,MAAR,MALmB,yDAAH,qDAQpBJ,GACD,GAAE,CAACH,IAEJ,IAGEQ,EAKEf,EALFe,eACAC,EAIEhB,EAJFgB,SAFF,EAMIhB,EAHFiB,OAAAA,OAHF,MAGW,GAHX,EAIEC,EAEElB,EAFFkB,aACAC,EACEnB,EADFmB,YAGIC,EAAcH,EAAOI,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,KAKzD,OACE,gCACE,oBAAQC,QAjBO,kBAAMvB,EAASE,EAAf,EAiBf,WACE,SAAC,MAAD,CAA0BsB,KAAK,SADjC,cAIA,4BACE,gBACEC,IAAKR,EAAW,UAZL,oCAYK,OAAmBA,GAVzC,6EAWMS,IAAKb,EACLc,MAAM,SAER,4BACE,wBAAKd,KACL,0BACE,uCACCG,EAFH,QAIA,wBACE,uCAEDF,GACD,wBACE,qCAEDI,SAIL,0BACE,wBACGxB,EAAMyB,KAAI,gBAAGxB,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAT,OACT,yBACE,SAAC,KAAD,CAAMQ,MAAO,CAAEF,KAAAA,GAAQ0B,GAAIhC,EAA3B,SACGD,KAFIA,EADA,SASf,SAAC,KAAD,MAGL,C,8LC7FDkC,EAAAA,GAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEVC,EAAU,UAKHC,EAAa,mCAAG,+GAEFH,EAAAA,GAAAA,IAAA,UANR,sBAMQ,oBAAsCC,IAFpC,uBAEjBG,EAFiB,EAEjBA,KAFiB,kBAGlBA,EAAKC,SAHa,gCAKzBvB,QAAQC,MAAR,MALyB,yDAAH,qDAkBbH,EAAY,mCAAG,WAAM0B,GAAN,kGAEDN,EAAAA,GAAAA,IAAA,UAClBE,GADkB,OACLI,EADK,oBACSL,EADT,oBAFC,uBAEhBG,EAFgB,EAEhBA,KAFgB,kBAKjBA,GALiB,gCAOxBtB,QAAQC,MAAR,MAPwB,yDAAH,sDAWZwB,EAAgB,mCAAG,WAAMC,GAAN,kGAELR,EAAAA,GAAAA,IAAA,UAjCV,gBAiCU,oBACKC,EADL,kBACsBO,EADtB,yBAFK,uBAEpBJ,EAFoB,EAEpBA,KAFoB,kBAKrBA,EAAKC,SALgB,gCAO5BvB,QAAQC,MAAR,MAP4B,yDAAH,sDAWhB0B,EAAO,mCAAG,WAAMH,GAAN,kGAEIN,EAAAA,GAAAA,IAAA,UAClBE,GADkB,OACLI,EADK,4BACiBL,EADjB,oBAFJ,uBAEXG,EAFW,EAEXA,KAFW,kBAKZA,EAAKM,MALO,gCAOnB5B,QAAQC,MAAR,MAPmB,yDAAH,sDAWP4B,EAAU,mCAAG,WAAML,GAAN,kGAECN,EAAAA,GAAAA,IAAA,UAClBE,GADkB,OACLI,EADK,4BACiBL,EADjB,oBAFD,uBAEdG,EAFc,EAEdA,KAFc,kBAKfA,EAAKC,SALU,gCAOtBvB,QAAQC,MAAR,MAPsB,yDAAH,qD","sources":["pages/MovieDetails/MovieDetails.jsx","services/api.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport {\n  Outlet,\n  useParams,\n  Link,\n  useNavigate,\n  useLocation,\n} from 'react-router-dom';\nimport { HiOutlineArrowCircleLeft } from 'react-icons/hi';\n\nimport { GetMovieById } from 'services/api';\n\nconst items = [\n  { text: 'Cast', href: 'cast' },\n  { text: 'Reviews', href: 'reviews' },\n];\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState({});\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const from = location.state?.from || '/';\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchMovieById = async () => {\n      try {\n        const result = await GetMovieById(movieId);\n        setMovie(result);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchMovieById();\n  }, [movieId]);\n\n  const goBackPage = () => navigate(from);\n\n  const {\n    original_title,\n    overview,\n    genres = [],\n    vote_average,\n    poster_path,\n  } = movie;\n\n  const filterGenre = genres.map(genre => genre.name).join(' ');\n  const baseImgUrl = 'https://image.tmdb.org/t/p/w500/';\n  const defaultImg =\n    'https://upload.wikimedia.org/wikipedia/commons/1/14/No_Image_Available.jpg';\n\n  return (\n    <section>\n      <button onClick={goBackPage}>\n        <HiOutlineArrowCircleLeft size=\"16px\" />\n        Go back\n      </button>\n      <div>\n        <img\n          src={poster_path ? `${baseImgUrl}${poster_path}` : defaultImg}\n          alt={original_title}\n          width=\"300\"\n        />\n        <div>\n          <h3>{original_title}</h3>\n          <p>\n            <b>User Score:</b>\n            {vote_average}%\n          </p>\n          <p>\n            <b>Overview:</b>\n          </p>\n          {overview}\n          <p>\n            <b>Genres:</b>\n          </p>\n          {filterGenre}\n        </div>\n      </div>\n\n      <div>\n        <ul>\n          {items.map(({ text, href }) => (\n            <li key={text}>\n              <Link state={{ from }} to={href}>\n                {text}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n      <Outlet />\n    </section>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'f770e26d26a9f8dc8d3f9af112edaff0';\n\nconst queryMovie = `/movie/`;\nconst queryTrending = `/trending/movie/day`;\nconst queryGenres = `/genre/movie/list`;\nconst querySearch = `/search/movie`;\n\nexport const TrendingMovie = async () => {\n  try {\n    const { data } = await axios.get(`${queryTrending}?api_key=${API_KEY}`);\n    return data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const GetGenre = async () => {\n  try {\n    const { genres } = await axios.get(`${queryGenres}?api_key=${API_KEY}`);\n    return genres;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const GetMovieById = async id => {\n  try {\n    const { data } = await axios.get(\n      `${queryMovie}${id}?api_key=${API_KEY}&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const GetMovieBySearch = async q => {\n  try {\n    const { data } = await axios.get(\n      `${querySearch}?api_key=${API_KEY}&query=${q}&include_adult=false`\n    );\n    return data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const GetCast = async id => {\n  try {\n    const { data } = await axios.get(\n      `${queryMovie}${id}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return data.cast;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const GetReviews = async id => {\n  try {\n    const { data } = await axios.get(\n      `${queryMovie}${id}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n    return data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n"],"names":["items","text","href","useState","movie","setMovie","navigate","useNavigate","from","useLocation","state","movieId","useParams","useEffect","fetchMovieById","GetMovieById","result","console","error","original_title","overview","genres","vote_average","poster_path","filterGenre","map","genre","name","join","onClick","size","src","alt","width","to","axios","API_KEY","queryMovie","TrendingMovie","data","results","id","GetMovieBySearch","q","GetCast","cast","GetReviews"],"sourceRoot":""}